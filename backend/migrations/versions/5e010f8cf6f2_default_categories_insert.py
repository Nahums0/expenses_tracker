"""Default categories insert

Revision ID: 5e010f8cf6f2
Revises: 227252270d0b
Create Date: 2023-11-18 13:41:59.317286

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from app.database.models import UserCategory


# revision identifiers, used by Alembic.
revision: str = "5e010f8cf6f2"
down_revision: Union[str, None] = "227252270d0b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


default_categories = [
    {"id": -1, "categoryName": "Unparsed"},
    {"categoryName": "General"},
    {"categoryName": "Bills"},
    {"categoryName": "Rent"},
    {"categoryName": "Transportation"},
    {"categoryName": "Groceries"},
    {"categoryName": "Leisure"},
    {"categoryName": "Health"},
    {"categoryName": "Debt Repayment"},
    {"categoryName": "Education"},
    {"categoryName": "Personal Care"},
    {"categoryName": "Home Maintenance"},
    {"categoryName": "Shopping"},
    {"categoryName": "Gas"},
    {"categoryName": "Entertainment & Media"},
    {"categoryName": "Dining"},
]


def upgrade() -> None:
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    for category in default_categories:
        # Check if category already exists (adjust according to your schema)
        exists = session.query(
            sa.exists().where(
                UserCategory.id == category.get("id", None),
            ),
        ).scalar()

        if not exists:
            # Insert new category (adjust according to your schema)
            new_category = UserCategory(
                categoryName=category["categoryName"],
            )
            if category.get("id"):
                new_category.id = category["id"]
            session.add(new_category)

    session.commit()

    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Remove the categories that were added
    for category_id in [c["id"] for c in default_categories]:
        session.query(UserCategory).filter(UserCategory.id == category_id).delete(synchronize_session=False)

    session.commit()
